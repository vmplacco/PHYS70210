install.packages("caret", dependencies = c("Depends", "Suggests"))
q()
install.packages("wavelet")
q()
install.packages("wavelet")
q()
install.packages("wavelets")
library(wavelets)
X1 <- c(.2,-.4,-.6,-.5,-.8,-.4,-.9,0,-.2,.1,-.1,.1,.7,.9,0,.3)
X2 <- c(.2,-.4,-.6,-.5,-.8,-.4,-.9,0,-.2,.1,-.1,.1,-.7,.9,0,.3)
newX <- cbind(X1,X2)
newX
wt <- dwt(newX, n.levels=3, boundary="reflection", fast=FALSE)
wt
plot(wt)
q()
library(neuralnet)
Var1 <- runif(50, 0, 100)
Var1
sqrt.data <- data.frame(Var1, Sqrt=sqrt(Var1))
sqrt.data
print(net.sqrt <- neuralnet(Sqrt~Var1, sqrt.data, hidden=10,
threshold=0.01))
net.sqrt
compute(net.sqrt, (1:10)^2)$net.result
compute(net.sqrt, (1:10)^2)
Var1
net.sqrt
sqrt.data
compute(net.sqrt, (1:10)^2)$net.result
compute(net.sqrt, (1:10)^2)
compute(net.sqrt, (1:10)^2)$net.result
(1:10)^2
compute(net.sqrt, (1:10)^2)
print(net.sqrt <- neuralnet(Sqrt~Var1, sqrt.data, hidden=10,threshold=0.01))
print(net.sqrt <- neuralnet(Sqrt~Var1, sqrt.data, hidden=30,threshold=0.01))
compute(net.sqrt, (1:10)^2)
print(net.sqrt <- neuralnet(Sqrt~Var1, sqrt.data, hidden=30,threshold=0.01))
(1:10)^2
Var1
Var1 <- runif(50, 0, 100)
Var1 <- runif(50, 0, 100)
Var!
Var1
mean(Var1)
median(Var1)
sd(Var1)
mad(Var1)
hist(Var1)
print(net.sqrt <- neuralnet(Sqrt~Var1, sqrt.data, hidden=100,threshold=0.01))
compute(net.sqrt, (1:10)^2)$net.compute
compute(net.sqrt, (1:10)^2)$net.result
net.sqrt2 <- neuralnet(Sqrt~Var1, sqrt.data, hidden=100,threshold=0.01)
plot(net.sqrt <- neuralnet(Sqrt~Var1, sqrt.data, hidden=100,threshold=0.01))
runif(50, 0, 100)
runif(200, 0, 100)
Var2=runif(200, 0, 100)
sqrt.data2 <- data.frame(Var2, Sqrt=sqrt(Var2))
sqtr.data2
sqrt.data2
print(net.sqrt <- neuralnet(Sqrt~Var1, sqrt.data, hidden=10,
threshold=0.01))
print(net.sqrt2 <- neuralnet(Sqrt~Var2, sqrt.data2, hidden=10,threshold=0.01))
compute(net.sqrt2, (1:10)^2)$net.result
compute(net.sqrt1, (1:10)^2)$net.result
compute(net.sqrt2, (1:10)^2)$net.result
compute(net.sqrt, (1:10)^2)$net.result
print(net.sqrt <- neuralnet(Sqrt~Var1, sqrt.data, hidden=10,threshold=0.01))
compute(net.sqrt, (1:10)^2)$net.result
compute(net.sqrt2, (1:10)^2)$net.result
print(net.sqrt <- neuralnet(Sqrt~Var1, sqrt.data, hidden=10,threshold=0.01))
print(net.sqrt <- neuralnet(Sqrt~Var1, sqrt.data, hidden=100,threshold=0.01))
print(net.sqrt <- neuralnet(Sqrt~Var1, sqrt.data, hidden=1000,threshold=0.01))
!ls
q()
set.seed(1)
x <- sample(seq(0.01, 3, length.out=500))
x
y <- 0.5*x + 0.3^(x^2) + rnorm(500, mean=0, sd=(0.05*(1+x^2)))
xy <- cbind(x, y)
xy
plot(xy, pch=20)
par(mfrow=c(1,2))
library(KernSmooth)
dpik(x) ; dpik(y)
smxy <- bkde2D(xy, bandwidth=c(dpik(x),dpik(y)))
image(smxy$x1, smxy$x2, smxy$fhat, col=topo.colors(30), xlab='Xvar', ylab='Yvar', cex.lab=1.2)
contour(smxy$x1, smxy$x2, smxy$fhat, add=T)
persp(smxy$x1,smxy$x2, smxy$fhat, theta=100, phi=40, shade=0.6, col='green1', xlab='Xvar', ylab='Yvar', zlab='Density')
cubsplxy <- smooth.spline(log10(xy))
plot(log10(xy), pch=20, cex=0.5, xlab='log(Xvar)', ylab='log(Yvar)')# Plot points
plot(log10(xy), pch=20, cex=0.5, ylim=c(-0.7, 0.4), xlab='log(Xvar)', ylab='log(Yvar)', main='Two spline fits')
lines(cubsplxy, lwd=2, col='darkgreen')# Plot the spline fit
predict(cubsplxy, seq(-2.0,0.5, length.out=20))# Evaluate the spline fit using R's generic `predict' function
knotx <- cubsplxy$fit$knot*cubsplxy$fit$range + cubsplxy$fit$min # Find and plot the spline knots
rug(knotx,col='darkgreen')
par(mfrow=c(2,2))
sortx <- x[order(x)] ; sorty <- y[order(x)]
local_fit <- loess(sorty ~ sortx, span=0.5, data.frame(x=x,y=y))
summary(local_fit)
plot(x,y,pch=20, cex=0.5)
lines(sortx, predict(local_fit), lwd=2, col=2)
par(mfrow=c(2,2))
sortx <- x[order(x)] ; sorty <- y[order(x)]
local_fit <- loess(sorty ~ sortx, span=0.5, data.frame(x=x,y=y))
summary(local_fit)
plot(x,y,pch=20, cex=0.5)
lines(sortx, predict(local_fit), lwd=2, col=2)
# Save evenly-spaced LOESS fit to a file
x_seq <- seq(0.0, 3.0, by=0.03)
loc_dat <- predict(local_fit, newdata=x_seq)
write(rbind(x_seq,loc_dat), sep=' ', ncol=2, file='localfit.txt')
library(kernlab)
gpreg <- gausspr(x, y, variance.model=T, cross=10, kerne='polydot', kpar=list(5))
gpreg
xtest <- seq(from=min(x), to=max(x), length.out=200)
plot(x, y, pch=20, cex=0.5)
lines(xtest, predict(gpreg, xtest), col='red3', lwd=3)
npplot(bws=bw.NW, ylim=c(0.5,1.5), plot.errors.method="bootstrap",
plot.errors.bar='I', plot.errors.type='quantiles') # Nonparametric regression w/ bootstrap errors
points(x, y, pch=20, cex=0.5)
lines(xtest, predict(gpreg, xtest), col='red3', lwd=3)  #  Gaussian Processes regression
lines(sortx[-1],fit_rqss.25$coef[1]+fit_rqss.25$coef[-1], col='blue3')  #  Linear quantile regression
lines(sortx[-1],fit_rqss.50$coef[1]+fit_rqss.50$coef[-1], lwd=2, col='blue3')
lines(sortx[-1],fit_rqss.75$coef[1]+fit_rqss.75$coef[-1], col='blue3')
lines(sortx, predict(local_fit), lwd=2, col='darkgreen') # LOESS
locfit_values <- predict(locfit_model, seq(0,3,length.out=100))
lines(seq(0,3,length.out=100), locfit_values, lwd=2, col="chocolate")  # locfit
legend('topleft', lty=1, lwd=2, c("NP reg w/ bootstrap",'Gauss Proc reg', 'Quantile reg', 'LOESS', 'locfit'), col=c('black', 'red3', 'blue3', 'darkgreen', 'chocolate'))
mean(a) ; median(a)
min(a)  ; max(a)
sum(a)
summary(a)
which.max(a)
match(44, a)
a[1:4]  ;  a[3]  ; a[a>50]  # Note that R vectors start with index 1, not 0
# R objects are placed into `classes': numeric, character, logical,
# vector, matrix, factor, data.frame, list, and dozens of others designed
# by CRAN packages. plot, print, summary functions are adapted to
# class objects. The list class allows a hierarchical structure of
# heterogeneous objects (like IDL sav file).
# Make a data.frame, a 2D array with column names
a_df <- data.frame(c('First', 'Second', 'Third', 'Fourth'),a)
names(a_df) <- c('Sequence', 'Value')
a_df
# R help files give essential information on all functions in a
# standard format
help(data.frame)
5 + 3 ; 5-3 ; 5*3 ; 5/3 ; 5^3
x <- 5 ; y <- 3
x+y
z <- seq(0.0, 0.5, 0.1)
z
H_0 <- 68  # km/s/Mpc,  Planck value
speed.light <- 3.0E5  # km/s
dist <- speed.light*z / H_0
dist
trunc(dist[4]) ; round(dist[4])
format(dist[4], digits=3, scientific=T)
sprintf('%7.2e',dist[4])# C language formatting
sin(0)  ; sin(pi/2)
ang <- seq(0, pi/2, length=30)
sin(ang)
plot(ang, sin(ang))
plot(ang, sqrt(sin(ang)), pch=20, cex=1.2, xlab='Angle (radian)', ylab='sqrt(sine)', main='Trig exercise', cex.lab=1.2, cex.main=1.7, col=2)
par(mar=c(5,7,4,2))
plot(ang, sqrt(sin(ang)), pch=20, cex=1.2, xlab=expression(theta ~~(radian)), ylab=expression(sqrt(sin(theta))), main='Trig exercise', cex.lab=1.2, cex.main=1.7, col=2)  #  see also help(plotmath)
lines(ang, sqrt(sin(ang)), lwd=2, lty=2, col='green3')
text(0.8,0.4,"This is an exercise in trigonometry", col='darkblue', font=4, cex=1.2)
par(mar=c(5,4,4,2))# return margins to default values for next plot
Omega_m <- (0.022068 + 0.12029) / (H_0/100)^2# Planck values
Omega_Lambda <- 0.6825
E.H0 <- function(redshift) {sqrt(Omega_m*(1+redshift)^3 + Omega_Lambda)}
lum.dist <- function(redshift) {
dist = (speed.light/H_0) * integrate(E.H0, 0, redshift)$value
return(dist) }
paste(' Luminosity distance for z=0.1', ' is ', lum.dist(0.1), 'Mpc')
paste(' Luminosity distance for z=0.1', ' is ', format(lum.dist(0.1), digits=4), 'Mpc')
paste(' Luminosity distance for z=1.0', ' is ', format(lum.dist(1.0), digits=4), 'Mpc')
set.seed(1)
x <- sample(seq(0.01, 3, length.out=500))
y <- 0.5*x + 0.3^(x^2) + rnorm(500, mean=0, sd=(0.05*(1+x^2)))
# VI. Examine, summarize and plot univariate distributions
summary(x) ; summary(y)   # Summarizes properties of an R object
str(x)# State the structure of an R object
rbind(summary(x),summary(y))# Concatenate rows.  cbind concatenates columns.
par(mfrow=c(1,2))  # Set up a two-panel figure
boxplot(x,  notch=T, main='Boxplot for X')
boxplot(y,  notch=T, pch=20, cex=0.5, main='Boxplot for Y')
hist(x, breaks='FD', main='', xlab='', col='#DC143C80')
hist(y, breaks='FD', main='', xlab='Yvar', col='#27408B70', add=T)
qqnorm(x, pch=20, cex=0.3)   # Quantile functions compared to normal distribution
qqline(x)# Expected relationship if variable is normal
qqnorm(y, pch=20, cex=0.3)   ; qqline(y)
par(mfrow=c(1,1))  # Return to a one-panel figure
plot(ecdf(x),pch=20,cex=0.3,main='',ylab='EDF',xlab='')
plot(ecdf(y),pch=20,cex=0.3,add=T)
text(2.0,0.5,"X") ; text(1.4,0.8,"Y")
hist(x, breaks='FD', main='', xlab='', col='#DC143C80')
hist(y, breaks='FD', main='', xlab='Yvar', col='#27408B70', add=T)
q()
ls()
dist
plot(dist)
ls()
library(rpostgresql
)
library(rRpostgresql)
library(rRpostgreSQL)
library(RpostgreSQL)
library(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
drv
con <- dbConnect(drv, dbname="hes")
dbListConnections(drv)
con <- dbConnect(drv, dbname="temp")
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, host="localhost", port="5432", dbname="temp")
con <- dbConnect(drv, host="localhost", port="5432", dbname="hes")
con
dbGetInfo(drv)
summary(con)
rs <- dbSendQuery(con,"select * from hesindex order by bhes desc limit 10")
rs
fetch(rs,n=-1)
rs <- dbSendQuery(con,"select henum from hesindex where bhes>18")
fetch(rs)
rs <- dbSendQuery(con,"select henum from hesindex where bhes>19")
rs <- dbSendQuery(con,"select henum from hesindex where bhes>19")
fetch(rs)
fetch(rs)
fetch(rs)
fetch(rs)
fetch(rs,n=-1)
rs <- dbSendQuery(con,"select henum from hesindex where bhes>19")
fetch(rs,n=-1)
fetch(rs,n=-1)
fetch(rs,n=-1)
rs <- dbSendQuery(con,"select henum,hes from hesindex order by bhes desc limit 10")
rs <- dbSendQuery(con,"select henum,bhes from hesindex order by bhes desc limit 10")
fetch(rs,n=-1)
fetch(rs,n=-1)
dq <- dbGetQuery(con,"select henum,bhes,vhes from hesindex order by bhes desc limit 10")
dq
attach(dq)
names(dq)
plot(bhes,vhes)
dq <- dbGetQuery(con,"select henum,bhes,vhes from hesindex where bhes>14 and bhes<14.5")
ls
plot(bhes,vhes)
dq
dq <- dbGetQuery(con,"select henum,bhes,vhes from hesindex where kphes<3 and kphes>2")
dq
dq <- dbGetQuery(con,"select henum,bhes,vhes from hesindex where kphes<3 and kphes>2.5")
dq
plot(bhes,vhes)
attach(dq)
plot(bhes,vhes)
dq <- dbGetQuery(con,"select henum,bhes,vhes,kphes from hesindex where kphes<3 and kphes>2.5 and vhes>10")
attach(dq)
names(dq)
attach(dq)
names(dq)
plot(bhes,vhes)
plot(bhes,kphes)
write.table(dq,"test.dat")
dev.dq <- dbGetQuery(con,"select henum,bhes,vhes,kphes from hesindex where kphes<3 and kphes>2.5 and vhes>10")dq <- dbGetQuery(con,"select henum,bhes,vhes,kphes from hesindex where kphes<3 and kphes>2.5 and vhes>10")
dev.copy2eps("test.eps")
dev.copy2eps(file="test.eps")
q()
library(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
q()
library(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, host="http://skyserver.sdss.org/dr12/en/tools/search/x_sql.aspx", port="5432", dbname="DR12")
con <- dbConnect(drv, host="skyserver.sdss.org/dr12/en/tools/search/x_sql.aspx", port="5432", dbname="DR12")
library(RCurl)
library(ggplot2)
mySqlQuery =
"SELECT objID, htmID, z, ra, dec, cx, cy, cz, class, subClass, type, survey, programname
FROM SpecPhoto
WHERE (htmid*37 & 0x000000000000FFFF) < (65)"
mySqlQuery = gsub(pattern="\n",replacement=" ",x=mySqlQuery)
urlBase = "http://skyserver.sdss.org/dr12/en/tools/search/x_sql.aspx"
X = getForm(urlBase, cmd = mySqlQuery, format = "csv")
X
write(X,file="SDSSsample.csv")
A = read.table("SDSSsample.csv", header=TRUE, sep=",", dec=".", comment.char="#")
ggplot() +
geom_point(data=A, aes(x=ra, y=dec, colour=class), size=1) +
scale_colour_hue(l=50) +
coord_map("mollweide",xlim=c(0,360),ylim=c(-90,90)) +
scale_y_continuous(breaks = seq(-90, 90, 30)) +
scale_x_continuous(breaks = seq(0, 360, 60)) +
theme(axis.title = element_blank()) +
theme(axis.ticks = element_blank(), axis.text = element_blank()) +
theme(panel.border = element_blank()) +
theme(panel.grid.major = element_line(colour="darkgrey")) +
ggtitle("SDSS DR12 coverage") +
theme(plot.title = element_text(size = rel(2)))
str(dq)
?str
str(dq)
?xtabs
xtabs(~kphes,dq)
q()
q
library(dygraphs)
data(UKLungDeaths)
cbind(ldeaths, mdeaths, fdeaths)
?dygraph
data
dados
bnb
dados=read.table("/Users/vplacco/posdoc/nd/classes/2016_spring/PHYS70210/r_example/table1.dat")
dados
summary(dados)
setwd('/Users/vplacco/Desktop/')
library(FITSio)
setwd('/Users/vplacco/posdoc/nd')
setwd('/Users/vplacco/posdoc/nd/classes/2016_spring/PHYS70210/r_fits/')
fits<-readFITS('K003358.fits')
fits
plot(fits$imDat)
plot(fits$imDat[,,1],type='l')
plot(fits$axDat[crval],fits$imDat[,,1],type='l')
plot(fits$imDat[,1,1],type='l')
plot(fits$imDat[,,1],type='l')
plot(fits$imDat[,2,1],type='l')
plot(fits$imDat[,,1],type='l')
plot(fits$axDat$crval,fits$imDat[,1,1],type='l')
plot((fits$axDat$crval[1]+x)*1.4131,fits$imDat[,1,1],type='l')
plot(fits$axDat$crval[1]+seq(1,,1.4132,fits$axDat$len[1]),fits$imDat[,1,1],type='l')
library(dygraphs)
cbind(fits$axDat$crval[1]+seq(1,,1.4132,fits$axDat$len[1]),fits$imDat[,1,1])
lcont=cbind(fits$axDat$crval[1]+seq(1,,1.4132,fits$axDat$len[1]),fits$imDat[,1,1])
plot(lcont)
plot(lcont,type='l')
dygraph(lcont)
data(UKLungDeaths)
datat=cbind(ldeaths, mdeaths, fdeaths)
datat
lcont
dygraph(datat)
seq(1,1881)
lcont2=cbind(seq(1,1881),fits$imDat[,1,1])
lcont2
dygraph(lcont2)
data.frame
data.frame(lcont2)
lcont3=data.frame(lcont2)
dygraph(lcont3)
lcont4=data.frame(lcont)
dygraph(lcont4)
lambdacont=data.frame(cbind(fits$axDat$crval[1]+seq(1,,1.4132,fits$axDat$len[1]),fits$imDat[,1,1]))
dygraph(lambdacont)
plot(lcont)
dygraph(lambdacont)
dygraph(lambdacont)  %>% dyRangeSelector(height = 20)
dygraph(lambdacont)  %>% dyRangeSelector(height = 40)
?data.frame
library("R2HTML", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("R2HTML")
fancyplot=dygraph(lambdacont)  %>% dyRangeSelector(height = 40)
html(dygraph(lambdacont))
HTML(dygraph(lambdacont))
library(R2HTML)
HTML(dygraph(lambdacont))
graph=dygraph(lambdacont)
dygraph(lambdacont)
library(dygraphs)
HTML(dygraph(lambdacont))
target <- HTMLInitFile(file.path(tempdir(),"R2HTML"),filename="sample", BackGroundColor="#BBBBEE")
target <- HTMLInitFile(filename="sample", BackGroundColor="#BBBBEE")
HTML("<br>Don't forget to use the CSS file in order to benefit from fixed-width font",file=target)
tmp <- as.data.frame(matrix(rnorm(100),ncol=10))
HTML(tmp,file=target)
HTML(dygraph(lambdacont),file=target)
HTMLEndFile()
q()
library(R2HTML)
library(dygraphs)
target <- HTMLInitFile(file.path(/Users/vplacco/Desktop/,"R2HTML"),filename="sample.html", BackGroundColor="#BBBBEE")
target <- HTMLInitFile(file.path('/Users/vplacco/Desktop/',"R2HTML"),filename="sample.html", BackGroundColor="#BBBBEE")
target <- HTMLInitFile(filename="sample.html", BackGroundColor="#BBBBEE")
?file.path
target <- HTMLInitFile(file.path($HOME),filename="sample.html", BackGroundColor="#BBBBEE")
HTML("<br>Don't forget to use the CSS file in order to benefit from fixed-width font",file=target)
tmp <- as.data.frame(matrix(rnorm(100),ncol=10))
HTML(tmp,file=target)
HTML(dygraph(lambdacont),file=target)
HTMLEndFile()
q()
